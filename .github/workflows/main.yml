name: ansys  test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  registry_package:
    types: [published]
  release:
    types: [created, published, released]
  workflow_dispatch:

jobs:

  build:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: cd src && pyinstaller -F solver_substract.py solver_add.py  -c -n ansyswindow
            OUT_FILE_NAME: ansyswindow.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: linux
            SHELL: bash
            CMD_BUILD: cd src && pyinstaller -F solver_add.py solver_substract.py -c -n ansysubuntu
            OUT_FILE_NAME: ansysubuntu
            ASSET_MIME: application/x-executable
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f src/requirements.txt ]; then pip install -r src/requirements.txt; fi

      - name: run build for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: create release tag
        id: release_tag
        shell: bash
        run: |
          value=`echo $RANDOM | md5sum | head -c 10; echo;`
          echo ::set-output name=tagval::$value

      - name: Create Release Window
        if: ${{matrix.TARGET  == 'windows'}}
        id: create_release_window
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  windows_${{ steps.release_tag.outputs.tagval }}
          release_name: Window ${{ steps.release_tag.outputs.tagval }}
          draft: false
          prerelease: false

      - name: Upload Release Asset window
        if: ${{matrix.TARGET  == 'windows'}}
        id: upload-release-asset-window
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_window.outputs.upload_url }}
          asset_path: src/dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

      - name: Create Release Ubuntu-latest
        if: ${{matrix.TARGET  == 'linux'}}
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: linux_${{ steps.release_tag.outputs.tagval }}
          release_name: linux ${{ steps.release_tag.outputs.tagval }}
          draft: false
          prerelease: false

      

      - name: Upload Release Asset linux
        if: ${{matrix.TARGET  == 'linux'}}
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: src/dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}
